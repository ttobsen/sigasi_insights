manual/config.md:Sigasi supports VHDL version 1993, 2002 and 2008, and Verilog (2005) and SystemVerilog (2012). You can select the default VHDL version to use in: **Window > Preferences > Sigasi > VHDL**. You can set the default Verilog in: **Window > Preferences > Sigasi > Verilog**. 
manual/config.md:Since [Sigasi 3.2][/releasenotes/sigasi-3.02], you can also set the language version per project, per folder and per file. In the Project Explorer, right click your project, folder or file; select **Properties**, **VHDL Version** (**Verilog Version** for Verilog projects) and select the version via the dropdown menu. 
manual/config.md:* **VHDL libaries:** Any new project that you create will have the common libraries (`STD` and `IEEE`) that correspond to your selected VHDL version. Your *existing project will **not** be modified*. If you want to update the common libraries for an existing project, right-click the project and select **Library Mapping > Reset Common Libraries**. Since [Sigasi 3.3][/releasenotes/sigasi-3.03], you will get a warning if your common libraries do not match the VHDL version of you VHDL file. You can use the proposed quick fix to resolve the issue.
manual/config.md:You can configure the code coloring by selecting **Window > Preferences > Sigasi > VHDL > Syntax Coloring**. For each class of semantic and syntactic elements, you can select the font, letter color, background color, style (bold, italic, underline, strike through).
manual/config.md:You can choose the severity of linting rules in: **Window > Preferences > Sigasi > VHDL > Errors/Warnings**.
manual/config.md:Sigasi comes with a large number of [keyshortcuts] preconfigured. You can configure keyboard shortcuts (key bindings) in **Window > Preferences > General > Keys**. You can modify individual keyboard shortcuts or add new key bindings.
manual/config.md:**Window > Preferences > Sigasi > VHDL > Formatting**
manual/config.md:-   **Alignment column for trailing comments**: this setting configures the column Sigasi uses to align trailing comments (default is column 40)
manual/editions.md:title: Sigasi Editions and Languages
manual/editions.md:## Sigasi Pro {: #pro}
manual/editions.md:*Sigasi Pro* was the [#creator] edition of Sigasi 2.x
manual/editions.md:## Sigasi Premium Desktop {: #premium}
manual/editions.md:*Sigasi Premium Desktop* was the [#xl] edition of Sigasi 2.x
manual/editions.md:## Sigasi Premium with Documentation add-on {: #premium-doc}
manual/editions.md:*Sigasi Premium Doc* was the [#xl_doc] edition of Sigasi 2.x
manual/editions.md:Sigasi supports VHDL and Verilog.
manual/editor.md:Sigasi \> VHDL** by toggling the **“Enter adjusts indentation on current
manual/editor.md:can configure them at **Window > Preferences > Sigasi > VHDL > Formatting**
manual/editor.md:You can configure the Verilog version (Verilog or SystemVerilog) via **Window > Preferences**, **Sigasi > Verilog** and **Verilog version**.
manual/editor.md:Sigasi \> Verilog** by toggling the **“Enter adjusts indentation on
manual/keyshortcuts.md:As you become more experienced with Sigasi, you will find that there are a number of actions that you perform quite often. At some point, you may feel that the GUI-based approach becomes too slow for these actions. For that reason, Sigasi provides a number of keyboard shortcuts. They are a great way to boost your productivity. A printable cheat sheet with [all shortcuts on one page is available for download](resources/keyboard-shortcuts.pdf).
manual/libraries.md:HDL libraries are a very powerful feature of the HDL languages. Sigasi
manual/libraries.md:they are implemented in Sigasi.
manual/libraries.md:Like with any HDL tool, Sigasi needs to know where the libraries are
manual/libraries.md:the project. Sigasi will then assume that the corresponding resource is
manual/libraries.md:Sigasi only writes changes to this configuration file when you make changes to the library configuration with the context menu in the *Project Explorer*. When you do make changes, Sigasi first checks that all paths in the library configuration still exist. If a path no longer exists, is will be removed from the configuration file.
manual/libraries.md:the Sigasi installation. Other than that, the `Common Libraries` folder
manual/libraries.md:Sigasi allows you to share libraries between multiple projects. The
manual/license-key.md:Sigasi's license key management system is based on the well known FlexNet (a.k.a. FlexLM) license manager.
manual/license-key.md:Sigasi supports both *node-locked* and *floating* license keys.
manual/license-key.md:1. Open the Sigasi License Key preference page: **Window > Preferences > Sigasi > License Key**
manual/license-key.md:        Doe;type:trial" HOSTID=ANY ISSUER=Sigasi ISSUED=21-Oct-2012 \
manual/license-key.md:        Doe;type:trial" HOSTID=ANY ISSUER=Sigasi ISSUED=21-Oct-2012 \
manual/license-key.md:**Window > Preferences > Sigasi > License Key**.
manual/license-key.md:You can change the port of the FlexNet and Sigasi daemon by changing the port numbers in the license key. By default ports `27000` and `27001` are used.
manual/license-key.md:The port of the Sigasi daemon is set on the `DAEMON` line. For example: `DAEMON sigasi port=27001`, forces the Sigasi to use port 27001. 
manual/license-key.md:### Starting the Flexnet and Sigasi Daemon on Linux
manual/license-key.md:the easiest way to start the Sigasi Flexnet Daemon is like this (on Linux)
manual/license-key.md:echo "Starting the Sigasi floating license server"
manual/license-key.md:### Starting the Flexnet and Sigasi Daemon on Windows
manual/license-key.md:1. Download the Sigasi daemon (see above)
manual/license-key.md:3. Unpack the zip file into the license folder  (`D:\Sigasi\license`)
manual/license-key.md:5. Save the license file supplied for Sigasi to the license folder
manual/license-key.md:	* **Service Name**: Sigasi License Manager
manual/license-key.md:You can release a floating license (*check a license in*) without closing your Sigasi application or Eclipse application. This is useful if you use Eclipse to edit other files than VHDL files, like C or Tcl.
manual/license-key.md:First, make sure that all VHDL and Verilog files are closed and all VHDL and Verilog projects are closed. Next select  **Help > Sigasi > Floating license > Release Sigasi Floating Licenses**
manual/license-key.md:To get the license back (to check the license out), open the license dialog **Help > Sigasi > Configure License...** and press **Apply**.
manual/license-key.md:* Which version of the Sigasi license daemon are you using?  
manual/license-key.md:  **Note:** The Sigasi 2 daemon needs to be updated to run Sigasi 3. Otherwise you will see an `License is not valid (Internal Flexlm Error)` error message in the Sigasi preference page.
manual/license-key.md:        Doe;type:trial" HOSTID=ANY ISSUER=Sigasi ISSUED=21-Oct-2012 \
manual/license-key.md:* Make sure both the Sigasi and Flexnet Daemon are the same version (i.e. from the same zip-file from the Sigasi download server).   
manual/license-key.md:	* make sure that the port for the Sigasi FlexLM license daemon is open
manual/license-key.md:	* you can force the port for the Sigasi license daemon by adding USE_SERVER and DAEMON sigasi port=<port number>to your license key
manual/license-key.md:* Some users reported that specifying an arbitrary absolute path for the Sigasi daemon on Windows (e.g. `DAEMON sigasi C:\\sigasi.exe port=27021`) does not work. It only works if the sigasi daemon is in the `C:\Sigasi` folder.
manual/license-key.md:* You can easily check the status of your license via the License Key preference page : **Preferences > Sigasi > License Key**. At the bottom of this preference page you can see the type and expiration date of your license.
manual/license-key.md:Check the content of the Sigasi License preference page via : **Window > Preferences** and **Sigasi > License Key**
manual/license-key.md:  * There seems to be a bug in `lmtools.exe` version 11 on some systems. You can work around this issue by configuring the (latest) Sigasi daemon with an older version of lmtools ([Download here](http://download.sigasi.com/flexnet/lmtools.zip)). 
manual/linting.md:In addition to syntax validation, Sigasi also checks your code for
manual/linting.md:Sigasi has a built-in VHDL linter, which provides info about code lint
manual/linting.md:in the design. Sigasi’s VHDL linter checks for the following problems:
manual/linting.md:The Sigasi VHDL linter has reasonable defaults for the severity level of
manual/linting.md:![Configuring the severity of Sigasi linting checks](images/problemseveritypreferencepage.png "Configuring the severity of Sigasi linting checks")
manual/linting.md:by Sigasi.
manual/linting.md:Sigasi flags this package as **Non-standard package**.
manual/linting.md:Available since Sigasi 2.25
manual/linting.md:Sigasi warns about port maps and generic maps that are not complete:  
manual/linting.md:this, you are writing illegal VHDL. Sigasi will mark an error, and so
manual/linting.md:intended. For that reason, Sigasi can warn you about this.
manual/linting.md:Available since Sigasi 2.30
manual/linting.md:By default Sigasi warns when positional associations are used. You can change the severity of this check via **Preferences > Sigasi > VHDL > Errors/Warnings** in the **Instantiation statement valiadation** section.
manual/linting.md:you do not need to set up these libraries by hand. Sigasi has a QuickFix
manual/linting.md:Altera Quartus (or Xilinx ISE) installation is not yet set, Sigasi will
manual/linting.md:\> Preferences \> Sigasi \> Toolchains**.
manual/linting.md:Sigasi warns about this:
manual/linting.md:Sigasi can warn about problems with your sensitivity list:
manual/linting.md:their files with two extra library clauses. Sigasi flags this as
manual/linting.md:If the Sigasi analyzer can determine that a condition is always false,
manual/linting.md:simulators. Sigasi accepts the ModelSim-style physical literals, but
manual/linting.md:Although VHDL is not case sensitive, it is recommend to always use the same capitalization when referring to the same declaration. Since version 2.30, Sigasi warns when the capitalization of a reference differs from the capitalization of the declaration. Because external libraries can have different code styles, this linting only checks references in the same library as its declaration.
manual/linting.md:Preferences \> Sigasi \> VHDL \> Naming conventions**) you can configure
manual/linting.md:Sigasi checks the vector size in assignments (Since [/releasenotes/sigasi-2.28]) and port maps (Since [/releasenotes/sigasi-3.01]). This check works at type-time and takes the (symbolic) value of generics into account.
manual/linting.md:The default way to configure the severity of the Sigasi linting checks is to set their severity in the **Errors/Warnings** preference page.
manual/mixed.md:If you don't have the correct license for mixed language projects, you can still create your designs using two separate languages. In this case, choose your main language and enable support for this language (in this example: VHDL). Now, the files in the other language (in this example: Verilog) can still be in your project. You can still edit them and you even get Sigasi support inside any one Verilog file. What is disabled now are the references from and to any Verilog files, but they work within a single Verilog file.
manual/onespin.md:Since Sigasi 3.1
manual/onespin.md:Before you can run OneSpin as external tool in Sigasi, it needs to be correctly set up.
manual/onespin.md:# Running Onespin in Sigasi
manual/onespin.md:If the `ONESPINROOT` environment variable is set, **OneSpin** will be available on the **Sigasi > Toolchains** Preference page.
manual/onespin.md:Once OneSpin is selected as external compiler, Sigasi will automatically run `read_vhdl` and `read_verilog` on your HDL source files. All OneSpin output will logged to the *Console View*. All warnings and errors will be shown as problem markers in the Sigasi editor.
manual/onespin.md:All OneSpin output will logged to a new tab in the *Console View*. All warnings and errors will be shown as problem markers in the Sigasi editor.
manual/opening.md:You can call Sigasi from the command line to open files. Just run
manual/opening.md:`sigasi yourFile.vhd`. You can also drag and drop files on the Sigasi
manual/opening.md:*open Sigasi project* to enjoy all of Sigasi’s powerful editing and
manual/opening.md:in a Sigasi project, Sigasi opens the file as an [external
manual/opening.md:This feature enables you to configure Sigasi as default editor for other
manual/opening.md:**Note** You could get a firewall warning when you start Sigasi because
manual/opening.md:Sigasi opens and listens to a port (4444 by default). This is necessary
manual/opening.md:for the communication between the running Sigasi instance and the
manual/opening.md:command line executable. Configure your firewall to allow Sigasi access
manual/opening.md:You can add some extra parameters to Sigasi to modify the behavior.
manual/opening.md:* `-application org.eclipse.ui.ide.workbench` : to use the default Eclipse workbench launcher instead of the Sigasi workbench launcher
manual/opening.md:* Drag the files to the Sigasi icon
manual/opening.md:If the file belongs to a project, Sigasi will open the file as part of
manual/opening.md:that project. If not Sigasi opens the file as *external file*. **Not all
manual/opening.md:Sigasi features are available** for external files. Navigation only
manual/opening.md:Sigasi features, you should set up a proper project.
manual/opening.md:# Setting up Sigasi as Default Editor
manual/opening.md:To configure Sigasi as default VHDL editor in Windows:
manual/opening.md:* Next click the **Browse** button and select the Sigasi executable (`<path to Sigasi>/sigasi.exe`)
manual/opening.md:* Next Sigasi will appear in the list of programs
manual/opening.md:* Enter the path of the Sigasi executable (or use the browse button)
manual/opening.md:* Click the **Remember application association for this type of file** so that all other VHDL files will also get opened with Sigasi.
manual/opening.md:![Sigasi as default editor in KDE](images/kde.png)
manual/opening.md:* In Use a custom command: Enter the path of the Sigasi executable (or use the **browse** button)
manual/opening.md:* Click the **Remember this appliation for "VHDL document" files** so that all other VHDL files will also get opened with Sigasi.
manual/opening.md:![Sigasi as default editor in Gnome](images/gnome.png)
manual/opening.md:* Click **Change All…** so that all other VHDL files will also get opened with Sigasi.
manual/opening.md:![Configuring Sigasi as default VHDL editor in Altera Quartus](images/sigasieditorquartus.png "Configuring Sigasi as default VHDL editor in Altera Quartus")
manual/opening.md:You can configure Sigasi to be the preferred editor for Xilinx Vivado.
manual/opening.md:    `<path to Sigasi>/sigasi.exe [file name] +[line number]`
manual/opening.md:![Configuring Sigasi as default editor in Xilinx Vivado menu](images/vivado_a1.png "Configuring Sigasi as default editor in Xilinx Vivado menu")
manual/opening.md:![Configuring Sigasi as default editor in Xilinx Vivado](images/vivado_a2.png "Configuring Sigasi as default editor in Xilinx Vivado")
manual/opening.md:To configure Sigasi as default VHDL editor in Xilinx ISE:
manual/opening.md:3. If Sigasi is on your path enter `sigasi.exe $1 +$2` (Windows) or `sigasi $1 +$2` (Linux).
manual/opening.md:   If Sigasi is not on your path, use the absolute path instead. If there are spaces in this
manual/opening.md:![Configuring Sigasi as default VHDL editor in Xilinx ISE](images/xilinxeditor.png "Configuring Sigasi as default VHDL editor in Xilinx ISE")
manual/opening.md:If you now open any VHDL file in Xilinx ISE, Sigasi will automatically open the selected file.
manual/plugins.md:Since Sigasi is built on Eclipse, you can install third party Eclipse
manual/plugins.md:support from Sigasi.
manual/plugins.md:Sigasi supports a wide range of [Revision Control
manual/plugins.md:This plugin is shipped with the standalone version of Sigasi.
manual/plugins.md:While this is not strictly speaking a version control system, Sigasi has
manual/projectsetup.md:Your work with Sigasi typically is organized as a *project*. A project
manual/projectsetup.md:is a collection of VHDL or Verilog files that belong together. Sigasi
manual/projectsetup.md:**File \> Import… \> Sigasi \> Import a VHDL project**. Browse to the
manual/projectsetup.md:Sigasi with an existing design*.
manual/projectsetup.md:Sigasi projects by selecting **Configure \> Remove VHDL support** or
manual/projectsetup.md:Sigasi projects can be shared using file archives. All project-related
manual/setup.md:title: Setting Up Sigasi
manual/setup.md:Sigasi is distributed online. It is available in two versions: as a
manual/setup.md:## Sigasi App
manual/setup.md:## Sigasi Eclipse plugin
manual/setup.md:# Installation of Sigasi App
manual/setup.md:To download and install Sigasi as a stand-alone application, follow the
manual/setup.md:# Installation of Sigasi Eclipse Plugin
manual/setup.md:   ![Install Sigasi plugin](images/setup-install-plugin.png)
manual/setup.md:The license key can be filled in under **Window > Preferences > Sigasi > License Key**.
manual/setup.md:Sigasi stores its projects on the file system in one or more
manual/setup.md:Sigasi has an automated update system. When updates are available, you
manual/setup.md:## Sigasi App
manual/setup.md:If you run Sigasi as a **standalone application**, the automated update system will periodically check for [/manual/setup#software-updates].
manual/setup.md:## Sigasi Eclipse plugin
manual/setup.md:If you run Sigasi as an **Eclipse plugin**, you may need to check for updates manually, by clicking **Help > Check for Updates**.
manual/setup.md:`workspaceSigasi` in your home directory).
manual/talkback.md:title: "Sigasi Talkback"
manual/talkback.md:Talkback is a Sigasi service that automatically collects metadata about how Sigasi is used and sends this metadata to Sigasi through a secured connection.
manual/talkback.md:By enabling Talkback you help us improve Sigasi:
manual/talkback.md:* Talkback lets us **determine which features are heavily used**. This helps in planning which kind of features are valuable for you as Sigasi user, so that we can adjust our product roadmap.
manual/talkback.md:* Talkback collects **performance statistics**, that we can relate to the project sizes. Together with to our in-house performance test, this helps us keep the Sigasi compiler and user interface fast.
manual/talkback.md:The end result is that you can use an always-improving Sigasi.
manual/talkback.md:# How does Sigasi use this information
manual/talkback.md:Sigasi uses the information transmitted by Talkback for marketing and product planning and development. We use it for **deciding which features to develop and improve**, for **finding and fixing bugs** and for **finding and fixing performance issues**.
manual/talkback.md:In the Talkback transmissions, we identify your Sigasi/Eclipse workspace using a generated identifier (a standard Java universal unique identifier [UUID](http://docs.oracle.com/javase/7/docs/api/java/util/UUID.html)).
manual/talkback.md:You can access the Talkback log to verify by clicking **Window > Preferences > Sigasi > Talkback > Talkback log**
manual/talkback.md:This log file is rotated for each new Sigasi session or when the log reaches a certain size.
manual/talkback.md:Talkback is *always disabled by default*. To enable Talkback, or to disable it later on, click **Window > Preferences > Sigasi > Talkback** and select or deselect the checkbox "Enable Talkback".
manual/talkback.md:Talkback does not support Proxies. If Sigasi Talkback is unable to connect to our server directly because of your firewall or proxy server, you need to purchase a commercial license.
manual/tools.md:Preferences \> Sigasi \> Toolchains**. There is a sub-page for each
manual/tools.md:**Apply**, you can select your toolchain on the **Sigasi \> Toolchains**
manual/tools.md:errors and fail. At Sigasi we think that this is too late. Problems
manual/tools.md:easily open VHDL files by double clicking on them in Quartus II. Sigasi
manual/tools.md:location by selecting **Window \> Preferences \> Sigasi \> Toolchains**.
manual/tools.md:You can change the Xilinx Vivado installation location by selecting **Window > Preferences > Sigasi > Toolchains > Xilinx Vivado**.
manual/tools.md:You can change the Xilinx ISE installation location by selecting **Window > Preferences > Sigasi > Toolchains > Xilinx ISE**.
manual/tools.md:To export a comma separated value (CSV) list of files in your project, right-click your project and select **Export**. In the **Sigasi** category, select **CSV File**. As a result, you get a file named `compilation_order.csv`, which lists the VHDL files in your project in a valid compile order.
manual/trouble.md:# Sigasi startup fails: "Could not create the Java virtual machine"
manual/trouble.md:On some computers, the standalone version of Sigasi will fail to start with an error message similar to: "Could not create the Java virtual machine." This happens especially on 32-bit Windows machines with less than 2GB of physical memory. The reason is that the Java virtual machine tries to allocate more memory than what is available.
manual/trouble.md:In order to solve this, you can decrease the default heap size settings. You can do this by adding following lines to `sigasi.ini` or `eclipse.ini` in your Sigasi installation folder:
manual/trouble.md:If you ever suspect that the state of your project is inconsistent in Sigasi, you can do one or all of the following things. Consider these
manual/trouble.md:Much of your configuration and cached data is stored in your workspace. By default, Sigasi’s workspace is located in `${HOME}/workspaceSigasi`.
manual/trouble.md:Obviously, you should upgrade the project. If this message keeps popping up, you may want to check that Sigasi is using the correct version of Quartus II, in the Sigasi application: **Window > Preferences > Sigasi > Toolchains > Altera Quartus II**.
manual/trouble.md:* The version number of your Sigasi tool: **Help > About Sigasi > Installation details** Note that the version number contains the date of the release. (For example, version `2.0.1.20110809…` was released on August 9, 2011.)
manual/user_interface.md:# The Sigasi perspectives
manual/user_interface.md:Sigasi is built upon the Eclipse platform, which permits to use multiple languages within a single environment. The user interface can be customized for a particular language. In Eclipse terminology, this customized user interface is called a **perspective**. The *icon* and *name* of the current perspective is highlighted in the upper right corner.
manual/user_interface.md:**Sigasi** is the recommended perspective to work with **projects** [creator]. **Sigasi Starter** is the recommended perspective to work with VHDL and Verilog files in *single file mode*.
manual/user_interface.md:If you use the standalone version of Sigasi, these perspective are the default. If you use the Eclipse plugin, another perspective may be open instead. You can select the Sigasi perspectives by clicking the button ![](icons/perspectivebutton.png) next the perspective icon. A window pops up in which you can select the perspective.
manual/user_interface.md:The Sigasi toolbar contains a widget called **Quick Access**. This widget allows you to quickly find open editors, available perspectives, views, preferences, wizards, commands, etc. Simply start typing the name of the item you wish to invoke.
manual/views.md:This chapter lists and explains the most important views in Sigasi. Some views are not covered here, more specifically some views that are either inherited from Eclipse, or views that are provided by third-party plugins. Please refer to the Eclipse documentation or to the specific plugin documentation for further information on those views.
manual/views.md:code. Sigasi automatically scans your comments for TODO and FIXME tags
manual/views.md:**Preferences \> Sigasi \> VHDL \> Task Tags**
manual/views.md:You can also export **all** *block diagrams of an entire project* at once: Click **Project > Export... > Sigasi > Block Diagrams export** and select your project. All SVGs will be created in **diagrams/blockdiagrams/** in your project.
manual/views.md:You can also export **all** *state machines of an entire project* at once: Click **Project > Export... > Sigasi > State Machine Diagrams export** and select your project. All SVGs will be created in **diagrams/statemachines/** in your project.
manual/views.md:documentation Sigasi can generate for your project.
manual/views.md:You do not need to add any special annotations to your code. Sigasi uses the same code/comment association as the hover provider ([/manual/editor#Comment Association]). So to document a `port`, you append a comment to a port declaration. To document an `architecture`, you put the comment just on top of the architecture.
manual/views.md:Since Sigasi 2.27 this export also saves the DocBook source code, if you
manual/views.md:When Sigasi launches external tools (e.g. external compiler, documentation generation,...) the output is logged to the console view.
